/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Decimal, InstantiateMsg, ExecuteMsg, ConverterApiExecMsg, Uint128, ExecMsg, RewardInfo, Coin, QueryMsg, ConverterApiQueryMsg, QueryMsg1, ConfigResponse } from "./Converter.types";
import { ConverterQueryClient, ConverterClient } from "./Converter.client";
export interface ConverterReactQuery<TResponse, TData = TResponse> {
  client: ConverterQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface ConverterConfigQuery<TData> extends ConverterReactQuery<ConfigResponse, TData> {}
export function useConverterConfigQuery<TData = ConfigResponse>({
  client,
  options
}: ConverterConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["converterConfig", client.contractAddress], () => client.config(), options);
}
export interface ConverterTestUnstakeMutation {
  client: ConverterClient;
  msg: {
    unstake: Coin;
    validator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useConverterTestUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ConverterTestUnstakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ConverterTestUnstakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.testUnstake(msg, fee, memo, funds), options);
}
export interface ConverterTestStakeMutation {
  client: ConverterClient;
  msg: {
    stake: Coin;
    validator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useConverterTestStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ConverterTestStakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ConverterTestStakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.testStake(msg, fee, memo, funds), options);
}
export interface ConverterDistributeRewardsMutation {
  client: ConverterClient;
  msg: {
    payments: RewardInfo[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useConverterDistributeRewardsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ConverterDistributeRewardsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ConverterDistributeRewardsMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.distributeRewards(msg, fee, memo, funds), options);
}
export interface ConverterDistributeRewardMutation {
  client: ConverterClient;
  msg: {
    validator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useConverterDistributeRewardMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ConverterDistributeRewardMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ConverterDistributeRewardMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.distributeReward(msg, fee, memo, funds), options);
}