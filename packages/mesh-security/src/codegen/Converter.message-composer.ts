/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Decimal, InstantiateMsg, ExecuteMsg, ConverterApiExecMsg, Uint128, ExecMsg, RewardInfo, Coin, QueryMsg, ConverterApiQueryMsg, QueryMsg1, ConfigResponse } from "./Converter.types";
export interface ConverterMessage {
  contractAddress: string;
  sender: string;
  distributeReward: ({
    validator
  }: {
    validator: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  distributeRewards: ({
    payments
  }: {
    payments: RewardInfo[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  testStake: ({
    stake,
    validator
  }: {
    stake: Coin;
    validator: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  testUnstake: ({
    unstake,
    validator
  }: {
    unstake: Coin;
    validator: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class ConverterMessageComposer implements ConverterMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.distributeReward = this.distributeReward.bind(this);
    this.distributeRewards = this.distributeRewards.bind(this);
    this.testStake = this.testStake.bind(this);
    this.testUnstake = this.testUnstake.bind(this);
  }

  distributeReward = ({
    validator
  }: {
    validator: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          distribute_reward: {
            validator
          }
        })),
        funds: _funds
      })
    };
  };
  distributeRewards = ({
    payments
  }: {
    payments: RewardInfo[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          distribute_rewards: {
            payments
          }
        })),
        funds: _funds
      })
    };
  };
  testStake = ({
    stake,
    validator
  }: {
    stake: Coin;
    validator: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          test_stake: {
            stake,
            validator
          }
        })),
        funds: _funds
      })
    };
  };
  testUnstake = ({
    unstake,
    validator
  }: {
    unstake: Coin;
    validator: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          test_unstake: {
            unstake,
            validator
          }
        })),
        funds: _funds
      })
    };
  };
}