/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, VirtualStakingApiExecMsg, Uint128, ExecMsg, Coin, QueryMsg, VirtualStakingApiQueryMsg, QueryMsg1, ConfigResponse } from "./VirtualStaking.types";
export interface VirtualStakingReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
}
export class VirtualStakingQueryClient implements VirtualStakingReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
}
export interface VirtualStakingInterface extends VirtualStakingReadOnlyInterface {
  contractAddress: string;
  sender: string;
  bond: ({
    amount,
    validator
  }: {
    amount: Coin;
    validator: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  unbond: ({
    amount,
    validator
  }: {
    amount: Coin;
    validator: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class VirtualStakingClient extends VirtualStakingQueryClient implements VirtualStakingInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.bond = this.bond.bind(this);
    this.unbond = this.unbond.bind(this);
  }

  bond = async ({
    amount,
    validator
  }: {
    amount: Coin;
    validator: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      bond: {
        amount,
        validator
      }
    }, fee, memo, _funds);
  };
  unbond = async ({
    amount,
    validator
  }: {
    amount: Coin;
    validator: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unbond: {
        amount,
        validator
      }
    }, fee, memo, _funds);
  };
}