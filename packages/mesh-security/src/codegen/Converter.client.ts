/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Decimal, InstantiateMsg, ExecuteMsg, ConverterApiExecMsg, Uint128, ExecMsg, RewardInfo, Coin, QueryMsg, ConverterApiQueryMsg, QueryMsg1, ConfigResponse } from "./Converter.types";
export interface ConverterReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
}
export class ConverterQueryClient implements ConverterReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
}
export interface ConverterInterface extends ConverterReadOnlyInterface {
  contractAddress: string;
  sender: string;
  distributeReward: ({
    validator
  }: {
    validator: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  distributeRewards: ({
    payments
  }: {
    payments: RewardInfo[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  testStake: ({
    stake,
    validator
  }: {
    stake: Coin;
    validator: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  testUnstake: ({
    unstake,
    validator
  }: {
    unstake: Coin;
    validator: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class ConverterClient extends ConverterQueryClient implements ConverterInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.distributeReward = this.distributeReward.bind(this);
    this.distributeRewards = this.distributeRewards.bind(this);
    this.testStake = this.testStake.bind(this);
    this.testUnstake = this.testUnstake.bind(this);
  }

  distributeReward = async ({
    validator
  }: {
    validator: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      distribute_reward: {
        validator
      }
    }, fee, memo, _funds);
  };
  distributeRewards = async ({
    payments
  }: {
    payments: RewardInfo[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      distribute_rewards: {
        payments
      }
    }, fee, memo, _funds);
  };
  testStake = async ({
    stake,
    validator
  }: {
    stake: Coin;
    validator: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      test_stake: {
        stake,
        validator
      }
    }, fee, memo, _funds);
  };
  testUnstake = async ({
    unstake,
    validator
  }: {
    unstake: Coin;
    validator: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      test_unstake: {
        unstake,
        validator
      }
    }, fee, memo, _funds);
  };
}