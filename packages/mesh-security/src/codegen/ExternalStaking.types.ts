/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Decimal = string;
export interface InstantiateMsg {
  denom: string;
  max_slashing: Decimal;
  remote_contact: AuthorizedEndpoint;
  rewards_denom: string;
  unbonding_period: number;
  vault: string;
  [k: string]: unknown;
}
export interface AuthorizedEndpoint {
  connection_id: string;
  port_id: string;
}
export type ExecuteMsg = CrossStakingApiExecMsg | ExecMsg;
export type CrossStakingApiExecMsg = {
  receive_virtual_stake: {
    amount: Coin;
    msg: Binary;
    owner: string;
    tx_id: number;
    [k: string]: unknown;
  };
};
export type Uint128 = string;
export type Binary = string;
export type ExecMsg = {
  test_commit_stake: {
    tx_id: number;
    [k: string]: unknown;
  };
} | {
  test_rollback_stake: {
    tx_id: number;
    [k: string]: unknown;
  };
} | {
  test_set_active_validator: {
    validator: AddValidator;
    [k: string]: unknown;
  };
} | {
  unstake: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  test_commit_unstake: {
    tx_id: number;
    [k: string]: unknown;
  };
} | {
  test_rollback_unstake: {
    tx_id: number;
    [k: string]: unknown;
  };
} | {
  withdraw_unbonded: {
    [k: string]: unknown;
  };
} | {
  test_distribute_rewards: {
    rewards: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  withdraw_rewards: {
    remote_recipient: string;
    validator: string;
    [k: string]: unknown;
  };
} | {
  test_commit_withdraw_rewards: {
    tx_id: number;
    [k: string]: unknown;
  };
} | {
  test_rollback_withdraw_rewards: {
    tx_id: number;
    [k: string]: unknown;
  };
};
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface AddValidator {
  pub_key: string;
  start_height: number;
  start_time: number;
  valoper: string;
}
export type QueryMsg = CrossStakingApiQueryMsg | QueryMsg1;
export type CrossStakingApiQueryMsg = {
  max_slash: {
    [k: string]: unknown;
  };
};
export type QueryMsg1 = {
  config: {
    [k: string]: unknown;
  };
} | {
  authorized_endpoint: {
    [k: string]: unknown;
  };
} | {
  ibc_channel: {
    [k: string]: unknown;
  };
} | {
  list_remote_validators: {
    limit?: number | null;
    start_after?: string | null;
    [k: string]: unknown;
  };
} | {
  stake: {
    user: string;
    validator: string;
    [k: string]: unknown;
  };
} | {
  stakes: {
    limit?: number | null;
    start_after?: string | null;
    user: string;
    [k: string]: unknown;
  };
} | {
  pending_tx: {
    tx_id: number;
    [k: string]: unknown;
  };
} | {
  all_pending_txs_desc: {
    limit?: number | null;
    start_after?: number | null;
    [k: string]: unknown;
  };
} | {
  pending_rewards: {
    user: string;
    validator: string;
    [k: string]: unknown;
  };
} | {
  all_pending_rewards: {
    limit?: number | null;
    start_after?: string | null;
    user: string;
    [k: string]: unknown;
  };
};
export type MaybePendingRewards = {
  rewards: Coin;
} | {
  locked: {};
};
export interface AllPendingRewards {
  rewards: ValidatorPendingRewards[];
}
export interface ValidatorPendingRewards {
  rewards: MaybePendingRewards;
  validator: string;
}
export type Tx = {
  in_flight_staking: {
    amount: Uint128;
    id: number;
    lienholder: Addr;
    slashable: Decimal;
    user: Addr;
  };
} | {
  in_flight_remote_staking: {
    amount: Uint128;
    id: number;
    user: Addr;
    validator: string;
  };
} | {
  in_flight_remote_unstaking: {
    amount: Uint128;
    id: number;
    user: Addr;
    validator: string;
  };
} | {
  in_flight_transfer_funds: {
    amount: Uint128;
    id: number;
    staker: Addr;
    validator: string;
  };
};
export type Addr = string;
export interface AllTxsResponse {
  txs: Tx[];
}
export interface ConfigResponse {
  denom: string;
  unbonding_period: number;
  vault: string;
}
export type IbcOrder = "ORDER_UNORDERED" | "ORDER_ORDERED";
export interface IbcChannelResponse {
  channel: IbcChannel;
}
export interface IbcChannel {
  connection_id: string;
  counterparty_endpoint: IbcEndpoint;
  endpoint: IbcEndpoint;
  order: IbcOrder;
  version: string;
  [k: string]: unknown;
}
export interface IbcEndpoint {
  channel_id: string;
  port_id: string;
  [k: string]: unknown;
}
export interface ListRemoteValidatorsResponse {
  validators: string[];
}
export interface MaxSlashResponse {
  max_slash: Decimal;
}
export type Timestamp = Uint64;
export type Uint64 = string;
export type PointsAlignment = Uint256;
export type Uint256 = string;
export interface Stake {
  pending_unbonds: PendingUnbond[];
  points_alignment: PointsAlignment;
  stake: Uint128;
  withdrawn_funds: Uint128;
}
export interface PendingUnbond {
  amount: Uint128;
  release_at: Timestamp;
}
export interface StakesResponse {
  stakes: StakeInfo[];
}
export interface StakeInfo {
  owner: string;
  stake: Uint128;
  validator: string;
}