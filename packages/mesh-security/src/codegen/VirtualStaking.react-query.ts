/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, VirtualStakingApiExecMsg, Uint128, ExecMsg, Coin, QueryMsg, VirtualStakingApiQueryMsg, QueryMsg1, ConfigResponse } from "./VirtualStaking.types";
import { VirtualStakingQueryClient, VirtualStakingClient } from "./VirtualStaking.client";
export interface VirtualStakingReactQuery<TResponse, TData = TResponse> {
  client: VirtualStakingQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface VirtualStakingConfigQuery<TData> extends VirtualStakingReactQuery<ConfigResponse, TData> {}
export function useVirtualStakingConfigQuery<TData = ConfigResponse>({
  client,
  options
}: VirtualStakingConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["virtualStakingConfig", client.contractAddress], () => client.config(), options);
}
export interface VirtualStakingUnbondMutation {
  client: VirtualStakingClient;
  msg: {
    amount: Coin;
    validator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVirtualStakingUnbondMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VirtualStakingUnbondMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VirtualStakingUnbondMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unbond(msg, fee, memo, funds), options);
}
export interface VirtualStakingBondMutation {
  client: VirtualStakingClient;
  msg: {
    amount: Coin;
    validator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVirtualStakingBondMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VirtualStakingBondMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VirtualStakingBondMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.bond(msg, fee, memo, funds), options);
}