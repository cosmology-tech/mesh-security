/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Decimal, InstantiateMsg, AuthorizedEndpoint, ExecuteMsg, CrossStakingApiExecMsg, Uint128, Binary, ExecMsg, Coin, AddValidator, QueryMsg, CrossStakingApiQueryMsg, QueryMsg1, MaybePendingRewards, AllPendingRewards, ValidatorPendingRewards, Tx, Addr, AllTxsResponse, ConfigResponse, IbcOrder, IbcChannelResponse, IbcChannel, IbcEndpoint, ListRemoteValidatorsResponse, MaxSlashResponse, Timestamp, Uint64, PointsAlignment, Uint256, Stake, PendingUnbond, StakesResponse, StakeInfo } from "./ExternalStaking.types";
export interface ExternalStakingMessage {
  contractAddress: string;
  sender: string;
  receiveVirtualStake: ({
    amount,
    msg,
    owner,
    txId
  }: {
    amount: Coin;
    msg: Binary;
    owner: string;
    txId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  testCommitStake: ({
    txId
  }: {
    txId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  testRollbackStake: ({
    txId
  }: {
    txId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  testSetActiveValidator: ({
    validator
  }: {
    validator: AddValidator;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unstake: ({
    amount,
    validator
  }: {
    amount: Coin;
    validator: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  testCommitUnstake: ({
    txId
  }: {
    txId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  testRollbackUnstake: ({
    txId
  }: {
    txId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdrawUnbonded: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  testDistributeRewards: ({
    rewards,
    validator
  }: {
    rewards: Coin;
    validator: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdrawRewards: ({
    remoteRecipient,
    validator
  }: {
    remoteRecipient: string;
    validator: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  testCommitWithdrawRewards: ({
    txId
  }: {
    txId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  testRollbackWithdrawRewards: ({
    txId
  }: {
    txId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class ExternalStakingMessageComposer implements ExternalStakingMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receiveVirtualStake = this.receiveVirtualStake.bind(this);
    this.testCommitStake = this.testCommitStake.bind(this);
    this.testRollbackStake = this.testRollbackStake.bind(this);
    this.testSetActiveValidator = this.testSetActiveValidator.bind(this);
    this.unstake = this.unstake.bind(this);
    this.testCommitUnstake = this.testCommitUnstake.bind(this);
    this.testRollbackUnstake = this.testRollbackUnstake.bind(this);
    this.withdrawUnbonded = this.withdrawUnbonded.bind(this);
    this.testDistributeRewards = this.testDistributeRewards.bind(this);
    this.withdrawRewards = this.withdrawRewards.bind(this);
    this.testCommitWithdrawRewards = this.testCommitWithdrawRewards.bind(this);
    this.testRollbackWithdrawRewards = this.testRollbackWithdrawRewards.bind(this);
  }

  receiveVirtualStake = ({
    amount,
    msg,
    owner,
    txId
  }: {
    amount: Coin;
    msg: Binary;
    owner: string;
    txId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          receive_virtual_stake: {
            amount,
            msg,
            owner,
            tx_id: txId
          }
        })),
        funds: _funds
      })
    };
  };
  testCommitStake = ({
    txId
  }: {
    txId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          test_commit_stake: {
            tx_id: txId
          }
        })),
        funds: _funds
      })
    };
  };
  testRollbackStake = ({
    txId
  }: {
    txId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          test_rollback_stake: {
            tx_id: txId
          }
        })),
        funds: _funds
      })
    };
  };
  testSetActiveValidator = ({
    validator
  }: {
    validator: AddValidator;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          test_set_active_validator: {
            validator
          }
        })),
        funds: _funds
      })
    };
  };
  unstake = ({
    amount,
    validator
  }: {
    amount: Coin;
    validator: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unstake: {
            amount,
            validator
          }
        })),
        funds: _funds
      })
    };
  };
  testCommitUnstake = ({
    txId
  }: {
    txId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          test_commit_unstake: {
            tx_id: txId
          }
        })),
        funds: _funds
      })
    };
  };
  testRollbackUnstake = ({
    txId
  }: {
    txId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          test_rollback_unstake: {
            tx_id: txId
          }
        })),
        funds: _funds
      })
    };
  };
  withdrawUnbonded = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw_unbonded: {}
        })),
        funds: _funds
      })
    };
  };
  testDistributeRewards = ({
    rewards,
    validator
  }: {
    rewards: Coin;
    validator: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          test_distribute_rewards: {
            rewards,
            validator
          }
        })),
        funds: _funds
      })
    };
  };
  withdrawRewards = ({
    remoteRecipient,
    validator
  }: {
    remoteRecipient: string;
    validator: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw_rewards: {
            remote_recipient: remoteRecipient,
            validator
          }
        })),
        funds: _funds
      })
    };
  };
  testCommitWithdrawRewards = ({
    txId
  }: {
    txId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          test_commit_withdraw_rewards: {
            tx_id: txId
          }
        })),
        funds: _funds
      })
    };
  };
  testRollbackWithdrawRewards = ({
    txId
  }: {
    txId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          test_rollback_withdraw_rewards: {
            tx_id: txId
          }
        })),
        funds: _funds
      })
    };
  };
}