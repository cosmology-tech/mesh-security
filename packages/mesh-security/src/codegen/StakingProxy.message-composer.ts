/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, ExecMsg, Uint128, VoteOption, Decimal, Coin, WeightedVoteOption, QueryMsg, QueryMsg1, Addr, Config } from "./StakingProxy.types";
export interface StakingProxyMessage {
  contractAddress: string;
  sender: string;
  stake: ({
    validator
  }: {
    validator: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  restake: ({
    amount,
    dstValidator,
    srcValidator
  }: {
    amount: Coin;
    dstValidator: string;
    srcValidator: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  vote: ({
    proposalId,
    vote
  }: {
    proposalId: number;
    vote: VoteOption;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  voteWeighted: ({
    proposalId,
    vote
  }: {
    proposalId: number;
    vote: WeightedVoteOption[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdrawRewards: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unstake: ({
    amount,
    validator
  }: {
    amount: Coin;
    validator: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  releaseUnbonded: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class StakingProxyMessageComposer implements StakingProxyMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.stake = this.stake.bind(this);
    this.restake = this.restake.bind(this);
    this.vote = this.vote.bind(this);
    this.voteWeighted = this.voteWeighted.bind(this);
    this.withdrawRewards = this.withdrawRewards.bind(this);
    this.unstake = this.unstake.bind(this);
    this.releaseUnbonded = this.releaseUnbonded.bind(this);
  }

  stake = ({
    validator
  }: {
    validator: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          stake: {
            validator
          }
        })),
        funds: _funds
      })
    };
  };
  restake = ({
    amount,
    dstValidator,
    srcValidator
  }: {
    amount: Coin;
    dstValidator: string;
    srcValidator: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          restake: {
            amount,
            dst_validator: dstValidator,
            src_validator: srcValidator
          }
        })),
        funds: _funds
      })
    };
  };
  vote = ({
    proposalId,
    vote
  }: {
    proposalId: number;
    vote: VoteOption;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          vote: {
            proposal_id: proposalId,
            vote
          }
        })),
        funds: _funds
      })
    };
  };
  voteWeighted = ({
    proposalId,
    vote
  }: {
    proposalId: number;
    vote: WeightedVoteOption[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          vote_weighted: {
            proposal_id: proposalId,
            vote
          }
        })),
        funds: _funds
      })
    };
  };
  withdrawRewards = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw_rewards: {}
        })),
        funds: _funds
      })
    };
  };
  unstake = ({
    amount,
    validator
  }: {
    amount: Coin;
    validator: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unstake: {
            amount,
            validator
          }
        })),
        funds: _funds
      })
    };
  };
  releaseUnbonded = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          release_unbonded: {}
        })),
        funds: _funds
      })
    };
  };
}