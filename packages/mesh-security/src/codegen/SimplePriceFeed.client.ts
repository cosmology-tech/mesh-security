/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Decimal, InstantiateMsg, ExecuteMsg, PriceFeedApiExecMsg, ExecMsg, QueryMsg, PriceFeedApiQueryMsg, QueryMsg1, ConfigResponse, PriceResponse } from "./SimplePriceFeed.types";
export interface SimplePriceFeedReadOnlyInterface {
  contractAddress: string;
  price: () => Promise<PriceResponse>;
  config: () => Promise<ConfigResponse>;
}
export class SimplePriceFeedQueryClient implements SimplePriceFeedReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.price = this.price.bind(this);
    this.config = this.config.bind(this);
  }

  price = async (): Promise<PriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      price: {}
    });
  };
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
}
export interface SimplePriceFeedInterface extends SimplePriceFeedReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updatePrice: ({
    nativePerForeign
  }: {
    nativePerForeign: Decimal;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class SimplePriceFeedClient extends SimplePriceFeedQueryClient implements SimplePriceFeedInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updatePrice = this.updatePrice.bind(this);
  }

  updatePrice = async ({
    nativePerForeign
  }: {
    nativePerForeign: Decimal;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_price: {
        native_per_foreign: nativePerForeign
      }
    }, fee, memo, _funds);
  };
}