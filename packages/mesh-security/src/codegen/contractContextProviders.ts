/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { IQueryClientProvider, ISigningClientProvider, IMessageComposerProvider } from "./contractContextBase";
import { ConverterQueryClient } from "./Converter.client";
import { ConverterClient } from "./Converter.client";
import { ConverterMessageComposer } from "./Converter.message-composer";
import { Converter } from "./Converter.provider";
import { SimplePriceFeedQueryClient } from "./SimplePriceFeed.client";
import { SimplePriceFeedClient } from "./SimplePriceFeed.client";
import { SimplePriceFeedMessageComposer } from "./SimplePriceFeed.message-composer";
import { SimplePriceFeed } from "./SimplePriceFeed.provider";
import { VirtualStakingQueryClient } from "./VirtualStaking.client";
import { VirtualStakingClient } from "./VirtualStaking.client";
import { VirtualStakingMessageComposer } from "./VirtualStaking.message-composer";
import { VirtualStaking } from "./VirtualStaking.provider";
import { ExternalStakingQueryClient } from "./ExternalStaking.client";
import { ExternalStakingClient } from "./ExternalStaking.client";
import { ExternalStakingMessageComposer } from "./ExternalStaking.message-composer";
import { ExternalStaking } from "./ExternalStaking.provider";
import { NativeStakingQueryClient } from "./NativeStaking.client";
import { NativeStakingClient } from "./NativeStaking.client";
import { NativeStakingMessageComposer } from "./NativeStaking.message-composer";
import { NativeStaking } from "./NativeStaking.provider";
import { StakingProxyQueryClient } from "./StakingProxy.client";
import { StakingProxyClient } from "./StakingProxy.client";
import { StakingProxyMessageComposer } from "./StakingProxy.message-composer";
import { StakingProxy } from "./StakingProxy.provider";
import { VaultQueryClient } from "./Vault.client";
import { VaultClient } from "./Vault.client";
import { VaultMessageComposer } from "./Vault.message-composer";
import { Vault } from "./Vault.provider";
export interface IContractsContext {
  converter: IQueryClientProvider<ConverterQueryClient> & ISigningClientProvider<ConverterClient> & IMessageComposerProvider<ConverterMessageComposer>;
  simplePriceFeed: IQueryClientProvider<SimplePriceFeedQueryClient> & ISigningClientProvider<SimplePriceFeedClient> & IMessageComposerProvider<SimplePriceFeedMessageComposer>;
  virtualStaking: IQueryClientProvider<VirtualStakingQueryClient> & ISigningClientProvider<VirtualStakingClient> & IMessageComposerProvider<VirtualStakingMessageComposer>;
  externalStaking: IQueryClientProvider<ExternalStakingQueryClient> & ISigningClientProvider<ExternalStakingClient> & IMessageComposerProvider<ExternalStakingMessageComposer>;
  nativeStaking: IQueryClientProvider<NativeStakingQueryClient> & ISigningClientProvider<NativeStakingClient> & IMessageComposerProvider<NativeStakingMessageComposer>;
  stakingProxy: IQueryClientProvider<StakingProxyQueryClient> & ISigningClientProvider<StakingProxyClient> & IMessageComposerProvider<StakingProxyMessageComposer>;
  vault: IQueryClientProvider<VaultQueryClient> & ISigningClientProvider<VaultClient> & IMessageComposerProvider<VaultMessageComposer>;
}
export const getProviders = (address?: string, cosmWasmClient?: CosmWasmClient, signingCosmWasmClient?: SigningCosmWasmClient) => ({
  converter: new Converter({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  simplePriceFeed: new SimplePriceFeed({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  virtualStaking: new VirtualStaking({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  externalStaking: new ExternalStaking({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  nativeStaking: new NativeStaking({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  stakingProxy: new StakingProxy({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  vault: new Vault({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  })
});