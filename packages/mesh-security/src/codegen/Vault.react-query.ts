/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Binary, InstantiateMsg, StakingInitInfo, ExecuteMsg, VaultApiExecMsg, Uint128, ExecMsg, Coin, QueryMsg, VaultApiQueryMsg, QueryMsg1, MaybeAccountResponse, AccountResponse, AccountClaimsResponse, LienInfo, AllAccountsResponse, AllAccountsResponseItem, Tx, Addr, Decimal, AllTxsResponse, Lien, ConfigResponse } from "./Vault.types";
import { VaultQueryClient, VaultClient } from "./Vault.client";
export interface VaultReactQuery<TResponse, TData = TResponse> {
  client: VaultQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface VaultAllPendingTxsDescQuery<TData> extends VaultReactQuery<AllTxsResponse, TData> {
  args: {
    limit?: number;
    startAfter?: number;
  };
}
export function useVaultAllPendingTxsDescQuery<TData = AllTxsResponse>({
  client,
  args,
  options
}: VaultAllPendingTxsDescQuery<TData>) {
  return useQuery<AllTxsResponse, Error, TData>(["vaultAllPendingTxsDesc", client.contractAddress, JSON.stringify(args)], () => client.allPendingTxsDesc({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface VaultPendingTxQuery<TData> extends VaultReactQuery<Tx, TData> {
  args: {
    txId: number;
  };
}
export function useVaultPendingTxQuery<TData = Tx>({
  client,
  args,
  options
}: VaultPendingTxQuery<TData>) {
  return useQuery<Tx, Error, TData>(["vaultPendingTx", client.contractAddress, JSON.stringify(args)], () => client.pendingTx({
    txId: args.txId
  }), options);
}
export interface VaultAllAccountsQuery<TData> extends VaultReactQuery<AllAccountsResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
    withCollateral: boolean;
  };
}
export function useVaultAllAccountsQuery<TData = AllAccountsResponse>({
  client,
  args,
  options
}: VaultAllAccountsQuery<TData>) {
  return useQuery<AllAccountsResponse, Error, TData>(["vaultAllAccounts", client.contractAddress, JSON.stringify(args)], () => client.allAccounts({
    limit: args.limit,
    startAfter: args.startAfter,
    withCollateral: args.withCollateral
  }), options);
}
export interface VaultAccountClaimsQuery<TData> extends VaultReactQuery<AccountClaimsResponse, TData> {
  args: {
    account: string;
    limit?: number;
    startAfter?: string;
  };
}
export function useVaultAccountClaimsQuery<TData = AccountClaimsResponse>({
  client,
  args,
  options
}: VaultAccountClaimsQuery<TData>) {
  return useQuery<AccountClaimsResponse, Error, TData>(["vaultAccountClaims", client.contractAddress, JSON.stringify(args)], () => client.accountClaims({
    account: args.account,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface VaultClaimQuery<TData> extends VaultReactQuery<Lien, TData> {
  args: {
    account: string;
    lienholder: string;
  };
}
export function useVaultClaimQuery<TData = Lien>({
  client,
  args,
  options
}: VaultClaimQuery<TData>) {
  return useQuery<Lien, Error, TData>(["vaultClaim", client.contractAddress, JSON.stringify(args)], () => client.claim({
    account: args.account,
    lienholder: args.lienholder
  }), options);
}
export interface VaultConfigQuery<TData> extends VaultReactQuery<ConfigResponse, TData> {}
export function useVaultConfigQuery<TData = ConfigResponse>({
  client,
  options
}: VaultConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["vaultConfig", client.contractAddress], () => client.config(), options);
}
export interface VaultAccountQuery<TData> extends VaultReactQuery<MaybeAccountResponse, TData> {
  args: {
    account: string;
  };
}
export function useVaultAccountQuery<TData = MaybeAccountResponse>({
  client,
  args,
  options
}: VaultAccountQuery<TData>) {
  return useQuery<MaybeAccountResponse, Error, TData>(["vaultAccount", client.contractAddress, JSON.stringify(args)], () => client.account({
    account: args.account
  }), options);
}
export interface VaultStakeLocalMutation {
  client: VaultClient;
  msg: {
    amount: Coin;
    msg: Binary;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVaultStakeLocalMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VaultStakeLocalMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VaultStakeLocalMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.stakeLocal(msg, fee, memo, funds), options);
}
export interface VaultStakeRemoteMutation {
  client: VaultClient;
  msg: {
    amount: Coin;
    contract: string;
    msg: Binary;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVaultStakeRemoteMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VaultStakeRemoteMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VaultStakeRemoteMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.stakeRemote(msg, fee, memo, funds), options);
}
export interface VaultUnbondMutation {
  client: VaultClient;
  msg: {
    amount: Coin;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVaultUnbondMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VaultUnbondMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VaultUnbondMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unbond(msg, fee, memo, funds), options);
}
export interface VaultBondMutation {
  client: VaultClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVaultBondMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VaultBondMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VaultBondMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.bond(fee, memo, funds), options);
}
export interface VaultRollbackTxMutation {
  client: VaultClient;
  msg: {
    txId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVaultRollbackTxMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VaultRollbackTxMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VaultRollbackTxMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.rollbackTx(msg, fee, memo, funds), options);
}
export interface VaultCommitTxMutation {
  client: VaultClient;
  msg: {
    txId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVaultCommitTxMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VaultCommitTxMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VaultCommitTxMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.commitTx(msg, fee, memo, funds), options);
}
export interface VaultReleaseLocalStakeMutation {
  client: VaultClient;
  msg: {
    owner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVaultReleaseLocalStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VaultReleaseLocalStakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VaultReleaseLocalStakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.releaseLocalStake(msg, fee, memo, funds), options);
}
export interface VaultReleaseCrossStakeMutation {
  client: VaultClient;
  msg: {
    amount: Coin;
    owner: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVaultReleaseCrossStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VaultReleaseCrossStakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VaultReleaseCrossStakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.releaseCrossStake(msg, fee, memo, funds), options);
}