/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Decimal, InstantiateMsg, AuthorizedEndpoint, ExecuteMsg, CrossStakingApiExecMsg, Uint128, Binary, ExecMsg, Coin, AddValidator, QueryMsg, CrossStakingApiQueryMsg, QueryMsg1, MaybePendingRewards, AllPendingRewards, ValidatorPendingRewards, Tx, Addr, AllTxsResponse, ConfigResponse, IbcOrder, IbcChannelResponse, IbcChannel, IbcEndpoint, ListRemoteValidatorsResponse, MaxSlashResponse, Timestamp, Uint64, PointsAlignment, Uint256, Stake, PendingUnbond, StakesResponse, StakeInfo } from "./ExternalStaking.types";
export interface ExternalStakingReadOnlyInterface {
  contractAddress: string;
  maxSlash: () => Promise<MaxSlashResponse>;
  config: () => Promise<ConfigResponse>;
  authorizedEndpoint: () => Promise<AuthorizedEndpoint>;
  ibcChannel: () => Promise<IbcChannelResponse>;
  listRemoteValidators: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ListRemoteValidatorsResponse>;
  stake: ({
    user,
    validator
  }: {
    user: string;
    validator: string;
  }) => Promise<Stake>;
  stakes: ({
    limit,
    startAfter,
    user
  }: {
    limit?: number;
    startAfter?: string;
    user: string;
  }) => Promise<StakesResponse>;
  pendingTx: ({
    txId
  }: {
    txId: number;
  }) => Promise<Tx>;
  allPendingTxsDesc: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: number;
  }) => Promise<AllTxsResponse>;
  pendingRewards: ({
    user,
    validator
  }: {
    user: string;
    validator: string;
  }) => Promise<MaybePendingRewards>;
  allPendingRewards: ({
    limit,
    startAfter,
    user
  }: {
    limit?: number;
    startAfter?: string;
    user: string;
  }) => Promise<AllPendingRewards>;
}
export class ExternalStakingQueryClient implements ExternalStakingReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.maxSlash = this.maxSlash.bind(this);
    this.config = this.config.bind(this);
    this.authorizedEndpoint = this.authorizedEndpoint.bind(this);
    this.ibcChannel = this.ibcChannel.bind(this);
    this.listRemoteValidators = this.listRemoteValidators.bind(this);
    this.stake = this.stake.bind(this);
    this.stakes = this.stakes.bind(this);
    this.pendingTx = this.pendingTx.bind(this);
    this.allPendingTxsDesc = this.allPendingTxsDesc.bind(this);
    this.pendingRewards = this.pendingRewards.bind(this);
    this.allPendingRewards = this.allPendingRewards.bind(this);
  }

  maxSlash = async (): Promise<MaxSlashResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      max_slash: {}
    });
  };
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  authorizedEndpoint = async (): Promise<AuthorizedEndpoint> => {
    return this.client.queryContractSmart(this.contractAddress, {
      authorized_endpoint: {}
    });
  };
  ibcChannel = async (): Promise<IbcChannelResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ibc_channel: {}
    });
  };
  listRemoteValidators = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ListRemoteValidatorsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_remote_validators: {
        limit,
        start_after: startAfter
      }
    });
  };
  stake = async ({
    user,
    validator
  }: {
    user: string;
    validator: string;
  }): Promise<Stake> => {
    return this.client.queryContractSmart(this.contractAddress, {
      stake: {
        user,
        validator
      }
    });
  };
  stakes = async ({
    limit,
    startAfter,
    user
  }: {
    limit?: number;
    startAfter?: string;
    user: string;
  }): Promise<StakesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      stakes: {
        limit,
        start_after: startAfter,
        user
      }
    });
  };
  pendingTx = async ({
    txId
  }: {
    txId: number;
  }): Promise<Tx> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pending_tx: {
        tx_id: txId
      }
    });
  };
  allPendingTxsDesc = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: number;
  }): Promise<AllTxsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_pending_txs_desc: {
        limit,
        start_after: startAfter
      }
    });
  };
  pendingRewards = async ({
    user,
    validator
  }: {
    user: string;
    validator: string;
  }): Promise<MaybePendingRewards> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pending_rewards: {
        user,
        validator
      }
    });
  };
  allPendingRewards = async ({
    limit,
    startAfter,
    user
  }: {
    limit?: number;
    startAfter?: string;
    user: string;
  }): Promise<AllPendingRewards> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_pending_rewards: {
        limit,
        start_after: startAfter,
        user
      }
    });
  };
}
export interface ExternalStakingInterface extends ExternalStakingReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receiveVirtualStake: ({
    amount,
    msg,
    owner,
    txId
  }: {
    amount: Coin;
    msg: Binary;
    owner: string;
    txId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  testCommitStake: ({
    txId
  }: {
    txId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  testRollbackStake: ({
    txId
  }: {
    txId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  testSetActiveValidator: ({
    validator
  }: {
    validator: AddValidator;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  unstake: ({
    amount,
    validator
  }: {
    amount: Coin;
    validator: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  testCommitUnstake: ({
    txId
  }: {
    txId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  testRollbackUnstake: ({
    txId
  }: {
    txId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawUnbonded: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  testDistributeRewards: ({
    rewards,
    validator
  }: {
    rewards: Coin;
    validator: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawRewards: ({
    remoteRecipient,
    validator
  }: {
    remoteRecipient: string;
    validator: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  testCommitWithdrawRewards: ({
    txId
  }: {
    txId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  testRollbackWithdrawRewards: ({
    txId
  }: {
    txId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class ExternalStakingClient extends ExternalStakingQueryClient implements ExternalStakingInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receiveVirtualStake = this.receiveVirtualStake.bind(this);
    this.testCommitStake = this.testCommitStake.bind(this);
    this.testRollbackStake = this.testRollbackStake.bind(this);
    this.testSetActiveValidator = this.testSetActiveValidator.bind(this);
    this.unstake = this.unstake.bind(this);
    this.testCommitUnstake = this.testCommitUnstake.bind(this);
    this.testRollbackUnstake = this.testRollbackUnstake.bind(this);
    this.withdrawUnbonded = this.withdrawUnbonded.bind(this);
    this.testDistributeRewards = this.testDistributeRewards.bind(this);
    this.withdrawRewards = this.withdrawRewards.bind(this);
    this.testCommitWithdrawRewards = this.testCommitWithdrawRewards.bind(this);
    this.testRollbackWithdrawRewards = this.testRollbackWithdrawRewards.bind(this);
  }

  receiveVirtualStake = async ({
    amount,
    msg,
    owner,
    txId
  }: {
    amount: Coin;
    msg: Binary;
    owner: string;
    txId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive_virtual_stake: {
        amount,
        msg,
        owner,
        tx_id: txId
      }
    }, fee, memo, _funds);
  };
  testCommitStake = async ({
    txId
  }: {
    txId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      test_commit_stake: {
        tx_id: txId
      }
    }, fee, memo, _funds);
  };
  testRollbackStake = async ({
    txId
  }: {
    txId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      test_rollback_stake: {
        tx_id: txId
      }
    }, fee, memo, _funds);
  };
  testSetActiveValidator = async ({
    validator
  }: {
    validator: AddValidator;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      test_set_active_validator: {
        validator
      }
    }, fee, memo, _funds);
  };
  unstake = async ({
    amount,
    validator
  }: {
    amount: Coin;
    validator: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unstake: {
        amount,
        validator
      }
    }, fee, memo, _funds);
  };
  testCommitUnstake = async ({
    txId
  }: {
    txId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      test_commit_unstake: {
        tx_id: txId
      }
    }, fee, memo, _funds);
  };
  testRollbackUnstake = async ({
    txId
  }: {
    txId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      test_rollback_unstake: {
        tx_id: txId
      }
    }, fee, memo, _funds);
  };
  withdrawUnbonded = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_unbonded: {}
    }, fee, memo, _funds);
  };
  testDistributeRewards = async ({
    rewards,
    validator
  }: {
    rewards: Coin;
    validator: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      test_distribute_rewards: {
        rewards,
        validator
      }
    }, fee, memo, _funds);
  };
  withdrawRewards = async ({
    remoteRecipient,
    validator
  }: {
    remoteRecipient: string;
    validator: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_rewards: {
        remote_recipient: remoteRecipient,
        validator
      }
    }, fee, memo, _funds);
  };
  testCommitWithdrawRewards = async ({
    txId
  }: {
    txId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      test_commit_withdraw_rewards: {
        tx_id: txId
      }
    }, fee, memo, _funds);
  };
  testRollbackWithdrawRewards = async ({
    txId
  }: {
    txId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      test_rollback_withdraw_rewards: {
        tx_id: txId
      }
    }, fee, memo, _funds);
  };
}