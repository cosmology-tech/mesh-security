/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Binary, InstantiateMsg, StakingInitInfo, ExecuteMsg, VaultApiExecMsg, Uint128, ExecMsg, Coin, QueryMsg, VaultApiQueryMsg, QueryMsg1, MaybeAccountResponse, AccountResponse, AccountClaimsResponse, LienInfo, AllAccountsResponse, AllAccountsResponseItem, Tx, Addr, Decimal, AllTxsResponse, Lien, ConfigResponse } from "./Vault.types";
export interface VaultMessage {
  contractAddress: string;
  sender: string;
  releaseCrossStake: ({
    amount,
    owner
  }: {
    amount: Coin;
    owner: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  releaseLocalStake: ({
    owner
  }: {
    owner: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  commitTx: ({
    txId
  }: {
    txId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  rollbackTx: ({
    txId
  }: {
    txId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  bond: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unbond: ({
    amount
  }: {
    amount: Coin;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  stakeRemote: ({
    amount,
    contract,
    msg
  }: {
    amount: Coin;
    contract: string;
    msg: Binary;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  stakeLocal: ({
    amount,
    msg
  }: {
    amount: Coin;
    msg: Binary;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class VaultMessageComposer implements VaultMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.releaseCrossStake = this.releaseCrossStake.bind(this);
    this.releaseLocalStake = this.releaseLocalStake.bind(this);
    this.commitTx = this.commitTx.bind(this);
    this.rollbackTx = this.rollbackTx.bind(this);
    this.bond = this.bond.bind(this);
    this.unbond = this.unbond.bind(this);
    this.stakeRemote = this.stakeRemote.bind(this);
    this.stakeLocal = this.stakeLocal.bind(this);
  }

  releaseCrossStake = ({
    amount,
    owner
  }: {
    amount: Coin;
    owner: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          release_cross_stake: {
            amount,
            owner
          }
        })),
        funds: _funds
      })
    };
  };
  releaseLocalStake = ({
    owner
  }: {
    owner: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          release_local_stake: {
            owner
          }
        })),
        funds: _funds
      })
    };
  };
  commitTx = ({
    txId
  }: {
    txId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          commit_tx: {
            tx_id: txId
          }
        })),
        funds: _funds
      })
    };
  };
  rollbackTx = ({
    txId
  }: {
    txId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          rollback_tx: {
            tx_id: txId
          }
        })),
        funds: _funds
      })
    };
  };
  bond = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          bond: {}
        })),
        funds: _funds
      })
    };
  };
  unbond = ({
    amount
  }: {
    amount: Coin;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unbond: {
            amount
          }
        })),
        funds: _funds
      })
    };
  };
  stakeRemote = ({
    amount,
    contract,
    msg
  }: {
    amount: Coin;
    contract: string;
    msg: Binary;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          stake_remote: {
            amount,
            contract,
            msg
          }
        })),
        funds: _funds
      })
    };
  };
  stakeLocal = ({
    amount,
    msg
  }: {
    amount: Coin;
    msg: Binary;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          stake_local: {
            amount,
            msg
          }
        })),
        funds: _funds
      })
    };
  };
}