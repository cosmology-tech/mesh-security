/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Binary = string;
export interface InstantiateMsg {
  denom: string;
  local_staking: StakingInitInfo;
  [k: string]: unknown;
}
export interface StakingInitInfo {
  admin?: string | null;
  code_id: number;
  label?: string | null;
  msg: Binary;
}
export type ExecuteMsg = VaultApiExecMsg | ExecMsg;
export type VaultApiExecMsg = {
  release_cross_stake: {
    amount: Coin;
    owner: string;
    [k: string]: unknown;
  };
} | {
  release_local_stake: {
    owner: string;
    [k: string]: unknown;
  };
} | {
  commit_tx: {
    tx_id: number;
    [k: string]: unknown;
  };
} | {
  rollback_tx: {
    tx_id: number;
    [k: string]: unknown;
  };
};
export type Uint128 = string;
export type ExecMsg = {
  bond: {
    [k: string]: unknown;
  };
} | {
  unbond: {
    amount: Coin;
    [k: string]: unknown;
  };
} | {
  stake_remote: {
    amount: Coin;
    contract: string;
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  stake_local: {
    amount: Coin;
    msg: Binary;
    [k: string]: unknown;
  };
};
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export type QueryMsg = VaultApiQueryMsg | QueryMsg1;
export type VaultApiQueryMsg = string;
export type QueryMsg1 = {
  account: {
    account: string;
    [k: string]: unknown;
  };
} | {
  config: {
    [k: string]: unknown;
  };
} | {
  claim: {
    account: string;
    lienholder: string;
    [k: string]: unknown;
  };
} | {
  account_claims: {
    account: string;
    limit?: number | null;
    start_after?: string | null;
    [k: string]: unknown;
  };
} | {
  all_accounts: {
    limit?: number | null;
    start_after?: string | null;
    with_collateral?: boolean;
    [k: string]: unknown;
  };
} | {
  pending_tx: {
    tx_id: number;
    [k: string]: unknown;
  };
} | {
  all_pending_txs_desc: {
    limit?: number | null;
    start_after?: number | null;
    [k: string]: unknown;
  };
};
export type MaybeAccountResponse = {
  account: AccountResponse;
} | {
  locked: {};
};
export interface AccountResponse {
  bonded: Uint128;
  denom: string;
  free: Uint128;
}
export interface AccountClaimsResponse {
  claims: LienInfo[];
}
export interface LienInfo {
  amount: Uint128;
  lienholder: string;
}
export interface AllAccountsResponse {
  accounts: AllAccountsResponseItem[];
}
export interface AllAccountsResponseItem {
  account: MaybeAccountResponse;
  user: string;
}
export type Tx = {
  in_flight_staking: {
    amount: Uint128;
    id: number;
    lienholder: Addr;
    slashable: Decimal;
    user: Addr;
  };
} | {
  in_flight_remote_staking: {
    amount: Uint128;
    id: number;
    user: Addr;
    validator: string;
  };
} | {
  in_flight_remote_unstaking: {
    amount: Uint128;
    id: number;
    user: Addr;
    validator: string;
  };
} | {
  in_flight_transfer_funds: {
    amount: Uint128;
    id: number;
    staker: Addr;
    validator: string;
  };
};
export type Addr = string;
export type Decimal = string;
export interface AllTxsResponse {
  txs: Tx[];
}
export interface Lien {
  amount: Uint128;
  slashable: Decimal;
}
export interface ConfigResponse {
  denom: string;
  local_staking: string;
}