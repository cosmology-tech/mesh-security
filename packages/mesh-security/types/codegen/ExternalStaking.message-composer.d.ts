/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { Binary, Coin, AddValidator } from "./ExternalStaking.types";
export interface ExternalStakingMessage {
    contractAddress: string;
    sender: string;
    receiveVirtualStake: ({ amount, msg, owner, txId }: {
        amount: Coin;
        msg: Binary;
        owner: string;
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testCommitStake: ({ txId }: {
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testRollbackStake: ({ txId }: {
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testSetActiveValidator: ({ validator }: {
        validator: AddValidator;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    unstake: ({ amount, validator }: {
        amount: Coin;
        validator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testCommitUnstake: ({ txId }: {
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testRollbackUnstake: ({ txId }: {
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    withdrawUnbonded: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testDistributeRewards: ({ rewards, validator }: {
        rewards: Coin;
        validator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    withdrawRewards: ({ remoteRecipient, validator }: {
        remoteRecipient: string;
        validator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testCommitWithdrawRewards: ({ txId }: {
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testRollbackWithdrawRewards: ({ txId }: {
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class ExternalStakingMessageComposer implements ExternalStakingMessage {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    receiveVirtualStake: ({ amount, msg, owner, txId }: {
        amount: Coin;
        msg: Binary;
        owner: string;
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testCommitStake: ({ txId }: {
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testRollbackStake: ({ txId }: {
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testSetActiveValidator: ({ validator }: {
        validator: AddValidator;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    unstake: ({ amount, validator }: {
        amount: Coin;
        validator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testCommitUnstake: ({ txId }: {
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testRollbackUnstake: ({ txId }: {
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    withdrawUnbonded: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testDistributeRewards: ({ rewards, validator }: {
        rewards: Coin;
        validator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    withdrawRewards: ({ remoteRecipient, validator }: {
        remoteRecipient: string;
        validator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testCommitWithdrawRewards: ({ txId }: {
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testRollbackWithdrawRewards: ({ txId }: {
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
