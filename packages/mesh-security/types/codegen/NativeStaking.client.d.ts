/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Binary, Config, MaxSlashResponse, OwnerByProxyResponse, ProxyByOwnerResponse } from "./NativeStaking.types";
export interface NativeStakingReadOnlyInterface {
    contractAddress: string;
    maxSlash: () => Promise<MaxSlashResponse>;
    config: () => Promise<Config>;
    proxyByOwner: ({ owner }: {
        owner: string;
    }) => Promise<ProxyByOwnerResponse>;
    ownerByProxy: ({ proxy }: {
        proxy: string;
    }) => Promise<OwnerByProxyResponse>;
}
export declare class NativeStakingQueryClient implements NativeStakingReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    maxSlash: () => Promise<MaxSlashResponse>;
    config: () => Promise<Config>;
    proxyByOwner: ({ owner }: {
        owner: string;
    }) => Promise<ProxyByOwnerResponse>;
    ownerByProxy: ({ proxy }: {
        proxy: string;
    }) => Promise<OwnerByProxyResponse>;
}
export interface NativeStakingInterface extends NativeStakingReadOnlyInterface {
    contractAddress: string;
    sender: string;
    receiveStake: ({ msg, owner }: {
        msg: Binary;
        owner: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    releaseProxyStake: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class NativeStakingClient extends NativeStakingQueryClient implements NativeStakingInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    receiveStake: ({ msg, owner }: {
        msg: Binary;
        owner: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    releaseProxyStake: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
