/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { VoteOption, Coin, WeightedVoteOption } from "./StakingProxy.types";
export interface StakingProxyMessage {
    contractAddress: string;
    sender: string;
    stake: ({ validator }: {
        validator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    restake: ({ amount, dstValidator, srcValidator }: {
        amount: Coin;
        dstValidator: string;
        srcValidator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    vote: ({ proposalId, vote }: {
        proposalId: number;
        vote: VoteOption;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    voteWeighted: ({ proposalId, vote }: {
        proposalId: number;
        vote: WeightedVoteOption[];
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    withdrawRewards: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
    unstake: ({ amount, validator }: {
        amount: Coin;
        validator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    releaseUnbonded: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class StakingProxyMessageComposer implements StakingProxyMessage {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    stake: ({ validator }: {
        validator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    restake: ({ amount, dstValidator, srcValidator }: {
        amount: Coin;
        dstValidator: string;
        srcValidator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    vote: ({ proposalId, vote }: {
        proposalId: number;
        vote: VoteOption;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    voteWeighted: ({ proposalId, vote }: {
        proposalId: number;
        vote: WeightedVoteOption[];
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    withdrawRewards: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
    unstake: ({ amount, validator }: {
        amount: Coin;
        validator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    releaseUnbonded: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
