/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { RewardInfo, Coin } from "./Converter.types";
export interface ConverterMessage {
    contractAddress: string;
    sender: string;
    distributeReward: ({ validator }: {
        validator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    distributeRewards: ({ payments }: {
        payments: RewardInfo[];
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testStake: ({ stake, validator }: {
        stake: Coin;
        validator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testUnstake: ({ unstake, validator }: {
        unstake: Coin;
        validator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class ConverterMessageComposer implements ConverterMessage {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    distributeReward: ({ validator }: {
        validator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    distributeRewards: ({ payments }: {
        payments: RewardInfo[];
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testStake: ({ stake, validator }: {
        stake: Coin;
        validator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    testUnstake: ({ unstake, validator }: {
        unstake: Coin;
        validator: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
