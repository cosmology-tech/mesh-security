/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Binary, Config, MaxSlashResponse, OwnerByProxyResponse, ProxyByOwnerResponse } from "./NativeStaking.types";
import { NativeStakingQueryClient, NativeStakingClient } from "./NativeStaking.client";
export interface NativeStakingReactQuery<TResponse, TData = TResponse> {
    client: NativeStakingQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface NativeStakingOwnerByProxyQuery<TData> extends NativeStakingReactQuery<OwnerByProxyResponse, TData> {
    args: {
        proxy: string;
    };
}
export declare function useNativeStakingOwnerByProxyQuery<TData = OwnerByProxyResponse>({ client, args, options }: NativeStakingOwnerByProxyQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface NativeStakingProxyByOwnerQuery<TData> extends NativeStakingReactQuery<ProxyByOwnerResponse, TData> {
    args: {
        owner: string;
    };
}
export declare function useNativeStakingProxyByOwnerQuery<TData = ProxyByOwnerResponse>({ client, args, options }: NativeStakingProxyByOwnerQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface NativeStakingConfigQuery<TData> extends NativeStakingReactQuery<Config, TData> {
}
export declare function useNativeStakingConfigQuery<TData = Config>({ client, options }: NativeStakingConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface NativeStakingMaxSlashQuery<TData> extends NativeStakingReactQuery<MaxSlashResponse, TData> {
}
export declare function useNativeStakingMaxSlashQuery<TData = MaxSlashResponse>({ client, options }: NativeStakingMaxSlashQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface NativeStakingReleaseProxyStakeMutation {
    client: NativeStakingClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useNativeStakingReleaseProxyStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, NativeStakingReleaseProxyStakeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, NativeStakingReleaseProxyStakeMutation, unknown>;
export interface NativeStakingReceiveStakeMutation {
    client: NativeStakingClient;
    msg: {
        msg: Binary;
        owner: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useNativeStakingReceiveStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, NativeStakingReceiveStakeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, NativeStakingReceiveStakeMutation, unknown>;
