/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { AuthorizedEndpoint, Binary, Coin, AddValidator, MaybePendingRewards, AllPendingRewards, Tx, AllTxsResponse, ConfigResponse, IbcChannelResponse, ListRemoteValidatorsResponse, MaxSlashResponse, Stake, StakesResponse } from "./ExternalStaking.types";
export interface ExternalStakingReadOnlyInterface {
    contractAddress: string;
    maxSlash: () => Promise<MaxSlashResponse>;
    config: () => Promise<ConfigResponse>;
    authorizedEndpoint: () => Promise<AuthorizedEndpoint>;
    ibcChannel: () => Promise<IbcChannelResponse>;
    listRemoteValidators: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ListRemoteValidatorsResponse>;
    stake: ({ user, validator }: {
        user: string;
        validator: string;
    }) => Promise<Stake>;
    stakes: ({ limit, startAfter, user }: {
        limit?: number;
        startAfter?: string;
        user: string;
    }) => Promise<StakesResponse>;
    pendingTx: ({ txId }: {
        txId: number;
    }) => Promise<Tx>;
    allPendingTxsDesc: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: number;
    }) => Promise<AllTxsResponse>;
    pendingRewards: ({ user, validator }: {
        user: string;
        validator: string;
    }) => Promise<MaybePendingRewards>;
    allPendingRewards: ({ limit, startAfter, user }: {
        limit?: number;
        startAfter?: string;
        user: string;
    }) => Promise<AllPendingRewards>;
}
export declare class ExternalStakingQueryClient implements ExternalStakingReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    maxSlash: () => Promise<MaxSlashResponse>;
    config: () => Promise<ConfigResponse>;
    authorizedEndpoint: () => Promise<AuthorizedEndpoint>;
    ibcChannel: () => Promise<IbcChannelResponse>;
    listRemoteValidators: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ListRemoteValidatorsResponse>;
    stake: ({ user, validator }: {
        user: string;
        validator: string;
    }) => Promise<Stake>;
    stakes: ({ limit, startAfter, user }: {
        limit?: number;
        startAfter?: string;
        user: string;
    }) => Promise<StakesResponse>;
    pendingTx: ({ txId }: {
        txId: number;
    }) => Promise<Tx>;
    allPendingTxsDesc: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: number;
    }) => Promise<AllTxsResponse>;
    pendingRewards: ({ user, validator }: {
        user: string;
        validator: string;
    }) => Promise<MaybePendingRewards>;
    allPendingRewards: ({ limit, startAfter, user }: {
        limit?: number;
        startAfter?: string;
        user: string;
    }) => Promise<AllPendingRewards>;
}
export interface ExternalStakingInterface extends ExternalStakingReadOnlyInterface {
    contractAddress: string;
    sender: string;
    receiveVirtualStake: ({ amount, msg, owner, txId }: {
        amount: Coin;
        msg: Binary;
        owner: string;
        txId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    testCommitStake: ({ txId }: {
        txId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    testRollbackStake: ({ txId }: {
        txId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    testSetActiveValidator: ({ validator }: {
        validator: AddValidator;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    unstake: ({ amount, validator }: {
        amount: Coin;
        validator: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    testCommitUnstake: ({ txId }: {
        txId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    testRollbackUnstake: ({ txId }: {
        txId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    withdrawUnbonded: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    testDistributeRewards: ({ rewards, validator }: {
        rewards: Coin;
        validator: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    withdrawRewards: ({ remoteRecipient, validator }: {
        remoteRecipient: string;
        validator: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    testCommitWithdrawRewards: ({ txId }: {
        txId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    testRollbackWithdrawRewards: ({ txId }: {
        txId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class ExternalStakingClient extends ExternalStakingQueryClient implements ExternalStakingInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    receiveVirtualStake: ({ amount, msg, owner, txId }: {
        amount: Coin;
        msg: Binary;
        owner: string;
        txId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    testCommitStake: ({ txId }: {
        txId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    testRollbackStake: ({ txId }: {
        txId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    testSetActiveValidator: ({ validator }: {
        validator: AddValidator;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    unstake: ({ amount, validator }: {
        amount: Coin;
        validator: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    testCommitUnstake: ({ txId }: {
        txId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    testRollbackUnstake: ({ txId }: {
        txId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    withdrawUnbonded: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    testDistributeRewards: ({ rewards, validator }: {
        rewards: Coin;
        validator: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    withdrawRewards: ({ remoteRecipient, validator }: {
        remoteRecipient: string;
        validator: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    testCommitWithdrawRewards: ({ txId }: {
        txId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    testRollbackWithdrawRewards: ({ txId }: {
        txId: number;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
