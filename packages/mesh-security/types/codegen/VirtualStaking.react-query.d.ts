/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Coin, ConfigResponse } from "./VirtualStaking.types";
import { VirtualStakingQueryClient, VirtualStakingClient } from "./VirtualStaking.client";
export interface VirtualStakingReactQuery<TResponse, TData = TResponse> {
    client: VirtualStakingQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface VirtualStakingConfigQuery<TData> extends VirtualStakingReactQuery<ConfigResponse, TData> {
}
export declare function useVirtualStakingConfigQuery<TData = ConfigResponse>({ client, options }: VirtualStakingConfigQuery<TData>): any;
export interface VirtualStakingUnbondMutation {
    client: VirtualStakingClient;
    msg: {
        amount: Coin;
        validator: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVirtualStakingUnbondMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VirtualStakingUnbondMutation>, "mutationFn">): any;
export interface VirtualStakingBondMutation {
    client: VirtualStakingClient;
    msg: {
        amount: Coin;
        validator: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVirtualStakingBondMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VirtualStakingBondMutation>, "mutationFn">): any;
