/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { AuthorizedEndpoint, Binary, Coin, AddValidator, MaybePendingRewards, AllPendingRewards, Tx, AllTxsResponse, ConfigResponse, IbcChannelResponse, ListRemoteValidatorsResponse, MaxSlashResponse, Stake, StakesResponse } from "./ExternalStaking.types";
import { ExternalStakingQueryClient, ExternalStakingClient } from "./ExternalStaking.client";
export interface ExternalStakingReactQuery<TResponse, TData = TResponse> {
    client: ExternalStakingQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface ExternalStakingAllPendingRewardsQuery<TData> extends ExternalStakingReactQuery<AllPendingRewards, TData> {
    args: {
        limit?: number;
        startAfter?: string;
        user: string;
    };
}
export declare function useExternalStakingAllPendingRewardsQuery<TData = AllPendingRewards>({ client, args, options }: ExternalStakingAllPendingRewardsQuery<TData>): any;
export interface ExternalStakingPendingRewardsQuery<TData> extends ExternalStakingReactQuery<MaybePendingRewards, TData> {
    args: {
        user: string;
        validator: string;
    };
}
export declare function useExternalStakingPendingRewardsQuery<TData = MaybePendingRewards>({ client, args, options }: ExternalStakingPendingRewardsQuery<TData>): any;
export interface ExternalStakingAllPendingTxsDescQuery<TData> extends ExternalStakingReactQuery<AllTxsResponse, TData> {
    args: {
        limit?: number;
        startAfter?: number;
    };
}
export declare function useExternalStakingAllPendingTxsDescQuery<TData = AllTxsResponse>({ client, args, options }: ExternalStakingAllPendingTxsDescQuery<TData>): any;
export interface ExternalStakingPendingTxQuery<TData> extends ExternalStakingReactQuery<Tx, TData> {
    args: {
        txId: number;
    };
}
export declare function useExternalStakingPendingTxQuery<TData = Tx>({ client, args, options }: ExternalStakingPendingTxQuery<TData>): any;
export interface ExternalStakingStakesQuery<TData> extends ExternalStakingReactQuery<StakesResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
        user: string;
    };
}
export declare function useExternalStakingStakesQuery<TData = StakesResponse>({ client, args, options }: ExternalStakingStakesQuery<TData>): any;
export interface ExternalStakingStakeQuery<TData> extends ExternalStakingReactQuery<Stake, TData> {
    args: {
        user: string;
        validator: string;
    };
}
export declare function useExternalStakingStakeQuery<TData = Stake>({ client, args, options }: ExternalStakingStakeQuery<TData>): any;
export interface ExternalStakingListRemoteValidatorsQuery<TData> extends ExternalStakingReactQuery<ListRemoteValidatorsResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useExternalStakingListRemoteValidatorsQuery<TData = ListRemoteValidatorsResponse>({ client, args, options }: ExternalStakingListRemoteValidatorsQuery<TData>): any;
export interface ExternalStakingIbcChannelQuery<TData> extends ExternalStakingReactQuery<IbcChannelResponse, TData> {
}
export declare function useExternalStakingIbcChannelQuery<TData = IbcChannelResponse>({ client, options }: ExternalStakingIbcChannelQuery<TData>): any;
export interface ExternalStakingAuthorizedEndpointQuery<TData> extends ExternalStakingReactQuery<AuthorizedEndpoint, TData> {
}
export declare function useExternalStakingAuthorizedEndpointQuery<TData = AuthorizedEndpoint>({ client, options }: ExternalStakingAuthorizedEndpointQuery<TData>): any;
export interface ExternalStakingConfigQuery<TData> extends ExternalStakingReactQuery<ConfigResponse, TData> {
}
export declare function useExternalStakingConfigQuery<TData = ConfigResponse>({ client, options }: ExternalStakingConfigQuery<TData>): any;
export interface ExternalStakingMaxSlashQuery<TData> extends ExternalStakingReactQuery<MaxSlashResponse, TData> {
}
export declare function useExternalStakingMaxSlashQuery<TData = MaxSlashResponse>({ client, options }: ExternalStakingMaxSlashQuery<TData>): any;
export interface ExternalStakingTestRollbackWithdrawRewardsMutation {
    client: ExternalStakingClient;
    msg: {
        txId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useExternalStakingTestRollbackWithdrawRewardsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ExternalStakingTestRollbackWithdrawRewardsMutation>, "mutationFn">): any;
export interface ExternalStakingTestCommitWithdrawRewardsMutation {
    client: ExternalStakingClient;
    msg: {
        txId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useExternalStakingTestCommitWithdrawRewardsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ExternalStakingTestCommitWithdrawRewardsMutation>, "mutationFn">): any;
export interface ExternalStakingWithdrawRewardsMutation {
    client: ExternalStakingClient;
    msg: {
        remoteRecipient: string;
        validator: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useExternalStakingWithdrawRewardsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ExternalStakingWithdrawRewardsMutation>, "mutationFn">): any;
export interface ExternalStakingTestDistributeRewardsMutation {
    client: ExternalStakingClient;
    msg: {
        rewards: Coin;
        validator: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useExternalStakingTestDistributeRewardsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ExternalStakingTestDistributeRewardsMutation>, "mutationFn">): any;
export interface ExternalStakingWithdrawUnbondedMutation {
    client: ExternalStakingClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useExternalStakingWithdrawUnbondedMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ExternalStakingWithdrawUnbondedMutation>, "mutationFn">): any;
export interface ExternalStakingTestRollbackUnstakeMutation {
    client: ExternalStakingClient;
    msg: {
        txId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useExternalStakingTestRollbackUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ExternalStakingTestRollbackUnstakeMutation>, "mutationFn">): any;
export interface ExternalStakingTestCommitUnstakeMutation {
    client: ExternalStakingClient;
    msg: {
        txId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useExternalStakingTestCommitUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ExternalStakingTestCommitUnstakeMutation>, "mutationFn">): any;
export interface ExternalStakingUnstakeMutation {
    client: ExternalStakingClient;
    msg: {
        amount: Coin;
        validator: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useExternalStakingUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ExternalStakingUnstakeMutation>, "mutationFn">): any;
export interface ExternalStakingTestSetActiveValidatorMutation {
    client: ExternalStakingClient;
    msg: {
        validator: AddValidator;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useExternalStakingTestSetActiveValidatorMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ExternalStakingTestSetActiveValidatorMutation>, "mutationFn">): any;
export interface ExternalStakingTestRollbackStakeMutation {
    client: ExternalStakingClient;
    msg: {
        txId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useExternalStakingTestRollbackStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ExternalStakingTestRollbackStakeMutation>, "mutationFn">): any;
export interface ExternalStakingTestCommitStakeMutation {
    client: ExternalStakingClient;
    msg: {
        txId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useExternalStakingTestCommitStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ExternalStakingTestCommitStakeMutation>, "mutationFn">): any;
export interface ExternalStakingReceiveVirtualStakeMutation {
    client: ExternalStakingClient;
    msg: {
        amount: Coin;
        msg: Binary;
        owner: string;
        txId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useExternalStakingReceiveVirtualStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ExternalStakingReceiveVirtualStakeMutation>, "mutationFn">): any;
