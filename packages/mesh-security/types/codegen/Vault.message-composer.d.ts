/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { Binary, Coin } from "./Vault.types";
export interface VaultMessage {
    contractAddress: string;
    sender: string;
    releaseCrossStake: ({ amount, owner }: {
        amount: Coin;
        owner: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    releaseLocalStake: ({ owner }: {
        owner: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    commitTx: ({ txId }: {
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    rollbackTx: ({ txId }: {
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    bond: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
    unbond: ({ amount }: {
        amount: Coin;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    stakeRemote: ({ amount, contract, msg }: {
        amount: Coin;
        contract: string;
        msg: Binary;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    stakeLocal: ({ amount, msg }: {
        amount: Coin;
        msg: Binary;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class VaultMessageComposer implements VaultMessage {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    releaseCrossStake: ({ amount, owner }: {
        amount: Coin;
        owner: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    releaseLocalStake: ({ owner }: {
        owner: string;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    commitTx: ({ txId }: {
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    rollbackTx: ({ txId }: {
        txId: number;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    bond: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
    unbond: ({ amount }: {
        amount: Coin;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    stakeRemote: ({ amount, contract, msg }: {
        amount: Coin;
        contract: string;
        msg: Binary;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
    stakeLocal: ({ amount, msg }: {
        amount: Coin;
        msg: Binary;
    }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
