/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import * as _0 from "./Converter.types";
import * as _1 from "./Converter.client";
import * as _2 from "./Converter.message-composer";
import * as _3 from "./Converter.react-query";
import * as _4 from "./Converter.provider";
import * as _5 from "./SimplePriceFeed.types";
import * as _6 from "./SimplePriceFeed.client";
import * as _7 from "./SimplePriceFeed.message-composer";
import * as _8 from "./SimplePriceFeed.react-query";
import * as _9 from "./SimplePriceFeed.provider";
import * as _10 from "./VirtualStaking.types";
import * as _11 from "./VirtualStaking.client";
import * as _12 from "./VirtualStaking.message-composer";
import * as _13 from "./VirtualStaking.react-query";
import * as _14 from "./VirtualStaking.provider";
import * as _15 from "./ExternalStaking.types";
import * as _16 from "./ExternalStaking.client";
import * as _17 from "./ExternalStaking.message-composer";
import * as _18 from "./ExternalStaking.react-query";
import * as _19 from "./ExternalStaking.provider";
import * as _20 from "./NativeStaking.types";
import * as _21 from "./NativeStaking.client";
import * as _22 from "./NativeStaking.message-composer";
import * as _23 from "./NativeStaking.react-query";
import * as _24 from "./NativeStaking.provider";
import * as _25 from "./StakingProxy.types";
import * as _26 from "./StakingProxy.client";
import * as _27 from "./StakingProxy.message-composer";
import * as _28 from "./StakingProxy.react-query";
import * as _29 from "./StakingProxy.provider";
import * as _30 from "./Vault.types";
import * as _31 from "./Vault.client";
import * as _32 from "./Vault.message-composer";
import * as _33 from "./Vault.react-query";
import * as _34 from "./Vault.provider";
export declare namespace contracts {
    const Converter: {
        Converter: typeof _4.Converter;
        useConverterConfigQuery<TData = _0.ConfigResponse>({ client, options }: _3.ConverterConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
        useConverterTestUnstakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.ConverterTestUnstakeMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.ConverterTestUnstakeMutation, unknown>;
        useConverterTestStakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.ConverterTestStakeMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.ConverterTestStakeMutation, unknown>;
        useConverterDistributeRewardsMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.ConverterDistributeRewardsMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.ConverterDistributeRewardsMutation, unknown>;
        useConverterDistributeRewardMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.ConverterDistributeRewardMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.ConverterDistributeRewardMutation, unknown>;
        ConverterMessageComposer: typeof _2.ConverterMessageComposer;
        ConverterQueryClient: typeof _1.ConverterQueryClient;
        ConverterClient: typeof _1.ConverterClient;
    };
    const SimplePriceFeed: {
        SimplePriceFeed: typeof _9.SimplePriceFeed;
        useSimplePriceFeedConfigQuery<TData = _5.ConfigResponse>({ client, options }: _8.SimplePriceFeedConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
        useSimplePriceFeedPriceQuery<TData_1 = _5.PriceResponse>({ client, options }: _8.SimplePriceFeedPriceQuery<TData_1>): import("@tanstack/react-query").UseQueryResult<TData_1, Error>;
        useSimplePriceFeedUpdatePriceMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.SimplePriceFeedUpdatePriceMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.SimplePriceFeedUpdatePriceMutation, unknown>;
        SimplePriceFeedMessageComposer: typeof _7.SimplePriceFeedMessageComposer;
        SimplePriceFeedQueryClient: typeof _6.SimplePriceFeedQueryClient;
        SimplePriceFeedClient: typeof _6.SimplePriceFeedClient;
    };
    const VirtualStaking: {
        VirtualStaking: typeof _14.VirtualStaking;
        useVirtualStakingConfigQuery<TData = _10.ConfigResponse>({ client, options }: _13.VirtualStakingConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
        useVirtualStakingUnbondMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.VirtualStakingUnbondMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.VirtualStakingUnbondMutation, unknown>;
        useVirtualStakingBondMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.VirtualStakingBondMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.VirtualStakingBondMutation, unknown>;
        VirtualStakingMessageComposer: typeof _12.VirtualStakingMessageComposer;
        VirtualStakingQueryClient: typeof _11.VirtualStakingQueryClient;
        VirtualStakingClient: typeof _11.VirtualStakingClient;
    };
    const ExternalStaking: {
        ExternalStaking: typeof _19.ExternalStaking;
        useExternalStakingAllPendingRewardsQuery<TData = _15.AllPendingRewards>({ client, args, options }: _18.ExternalStakingAllPendingRewardsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
        useExternalStakingPendingRewardsQuery<TData_1 = _15.MaybePendingRewards>({ client, args, options }: _18.ExternalStakingPendingRewardsQuery<TData_1>): import("@tanstack/react-query").UseQueryResult<TData_1, Error>;
        useExternalStakingAllPendingTxsDescQuery<TData_2 = _15.AllTxsResponse>({ client, args, options }: _18.ExternalStakingAllPendingTxsDescQuery<TData_2>): import("@tanstack/react-query").UseQueryResult<TData_2, Error>;
        useExternalStakingPendingTxQuery<TData_3 = _15.Tx>({ client, args, options }: _18.ExternalStakingPendingTxQuery<TData_3>): import("@tanstack/react-query").UseQueryResult<TData_3, Error>;
        useExternalStakingStakesQuery<TData_4 = _15.StakesResponse>({ client, args, options }: _18.ExternalStakingStakesQuery<TData_4>): import("@tanstack/react-query").UseQueryResult<TData_4, Error>;
        useExternalStakingStakeQuery<TData_5 = _15.Stake>({ client, args, options }: _18.ExternalStakingStakeQuery<TData_5>): import("@tanstack/react-query").UseQueryResult<TData_5, Error>;
        useExternalStakingListRemoteValidatorsQuery<TData_6 = _15.ListRemoteValidatorsResponse>({ client, args, options }: _18.ExternalStakingListRemoteValidatorsQuery<TData_6>): import("@tanstack/react-query").UseQueryResult<TData_6, Error>;
        useExternalStakingIbcChannelQuery<TData_7 = _15.IbcChannelResponse>({ client, options }: _18.ExternalStakingIbcChannelQuery<TData_7>): import("@tanstack/react-query").UseQueryResult<TData_7, Error>;
        useExternalStakingAuthorizedEndpointQuery<TData_8 = _15.AuthorizedEndpoint>({ client, options }: _18.ExternalStakingAuthorizedEndpointQuery<TData_8>): import("@tanstack/react-query").UseQueryResult<TData_8, Error>;
        useExternalStakingConfigQuery<TData_9 = _15.ConfigResponse>({ client, options }: _18.ExternalStakingConfigQuery<TData_9>): import("@tanstack/react-query").UseQueryResult<TData_9, Error>;
        useExternalStakingMaxSlashQuery<TData_10 = _15.MaxSlashResponse>({ client, options }: _18.ExternalStakingMaxSlashQuery<TData_10>): import("@tanstack/react-query").UseQueryResult<TData_10, Error>;
        useExternalStakingTestRollbackWithdrawRewardsMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestRollbackWithdrawRewardsMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestRollbackWithdrawRewardsMutation, unknown>;
        useExternalStakingTestCommitWithdrawRewardsMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestCommitWithdrawRewardsMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestCommitWithdrawRewardsMutation, unknown>;
        useExternalStakingWithdrawRewardsMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingWithdrawRewardsMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingWithdrawRewardsMutation, unknown>;
        useExternalStakingTestDistributeRewardsMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestDistributeRewardsMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestDistributeRewardsMutation, unknown>;
        useExternalStakingWithdrawUnbondedMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingWithdrawUnbondedMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingWithdrawUnbondedMutation, unknown>;
        useExternalStakingTestRollbackUnstakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestRollbackUnstakeMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestRollbackUnstakeMutation, unknown>;
        useExternalStakingTestCommitUnstakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestCommitUnstakeMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestCommitUnstakeMutation, unknown>;
        useExternalStakingUnstakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingUnstakeMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingUnstakeMutation, unknown>;
        useExternalStakingTestSetActiveValidatorMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestSetActiveValidatorMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestSetActiveValidatorMutation, unknown>;
        useExternalStakingTestRollbackStakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestRollbackStakeMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestRollbackStakeMutation, unknown>;
        useExternalStakingTestCommitStakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestCommitStakeMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestCommitStakeMutation, unknown>;
        useExternalStakingReceiveVirtualStakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingReceiveVirtualStakeMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingReceiveVirtualStakeMutation, unknown>;
        ExternalStakingMessageComposer: typeof _17.ExternalStakingMessageComposer;
        ExternalStakingQueryClient: typeof _16.ExternalStakingQueryClient;
        ExternalStakingClient: typeof _16.ExternalStakingClient;
    };
    const NativeStaking: {
        NativeStaking: typeof _24.NativeStaking;
        useNativeStakingOwnerByProxyQuery<TData = _20.OwnerByProxyResponse>({ client, args, options }: _23.NativeStakingOwnerByProxyQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
        useNativeStakingProxyByOwnerQuery<TData_1 = _20.ProxyByOwnerResponse>({ client, args, options }: _23.NativeStakingProxyByOwnerQuery<TData_1>): import("@tanstack/react-query").UseQueryResult<TData_1, Error>;
        useNativeStakingConfigQuery<TData_2 = _20.Config>({ client, options }: _23.NativeStakingConfigQuery<TData_2>): import("@tanstack/react-query").UseQueryResult<TData_2, Error>;
        useNativeStakingMaxSlashQuery<TData_3 = _20.MaxSlashResponse>({ client, options }: _23.NativeStakingMaxSlashQuery<TData_3>): import("@tanstack/react-query").UseQueryResult<TData_3, Error>;
        useNativeStakingReleaseProxyStakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _23.NativeStakingReleaseProxyStakeMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _23.NativeStakingReleaseProxyStakeMutation, unknown>;
        useNativeStakingReceiveStakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _23.NativeStakingReceiveStakeMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _23.NativeStakingReceiveStakeMutation, unknown>;
        NativeStakingMessageComposer: typeof _22.NativeStakingMessageComposer;
        NativeStakingQueryClient: typeof _21.NativeStakingQueryClient;
        NativeStakingClient: typeof _21.NativeStakingClient;
    };
    const StakingProxy: {
        StakingProxy: typeof _29.StakingProxy;
        useStakingProxyConfigQuery<TData = _25.Config>({ client, options }: _28.StakingProxyConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
        useStakingProxyReleaseUnbondedMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyReleaseUnbondedMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyReleaseUnbondedMutation, unknown>;
        useStakingProxyUnstakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyUnstakeMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyUnstakeMutation, unknown>;
        useStakingProxyWithdrawRewardsMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyWithdrawRewardsMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyWithdrawRewardsMutation, unknown>;
        useStakingProxyVoteWeightedMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyVoteWeightedMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyVoteWeightedMutation, unknown>;
        useStakingProxyVoteMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyVoteMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyVoteMutation, unknown>;
        useStakingProxyRestakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyRestakeMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyRestakeMutation, unknown>;
        useStakingProxyStakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyStakeMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyStakeMutation, unknown>;
        StakingProxyMessageComposer: typeof _27.StakingProxyMessageComposer;
        StakingProxyQueryClient: typeof _26.StakingProxyQueryClient;
        StakingProxyClient: typeof _26.StakingProxyClient;
    };
    const Vault: {
        Vault: typeof _34.Vault;
        useVaultAllPendingTxsDescQuery<TData = _30.AllTxsResponse>({ client, args, options }: _33.VaultAllPendingTxsDescQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
        useVaultPendingTxQuery<TData_1 = _30.Tx>({ client, args, options }: _33.VaultPendingTxQuery<TData_1>): import("@tanstack/react-query").UseQueryResult<TData_1, Error>;
        useVaultAllAccountsQuery<TData_2 = _30.AllAccountsResponse>({ client, args, options }: _33.VaultAllAccountsQuery<TData_2>): import("@tanstack/react-query").UseQueryResult<TData_2, Error>;
        useVaultAccountClaimsQuery<TData_3 = _30.AccountClaimsResponse>({ client, args, options }: _33.VaultAccountClaimsQuery<TData_3>): import("@tanstack/react-query").UseQueryResult<TData_3, Error>;
        useVaultClaimQuery<TData_4 = _30.Lien>({ client, args, options }: _33.VaultClaimQuery<TData_4>): import("@tanstack/react-query").UseQueryResult<TData_4, Error>;
        useVaultConfigQuery<TData_5 = _30.ConfigResponse>({ client, options }: _33.VaultConfigQuery<TData_5>): import("@tanstack/react-query").UseQueryResult<TData_5, Error>;
        useVaultAccountQuery<TData_6 = _30.MaybeAccountResponse>({ client, args, options }: _33.VaultAccountQuery<TData_6>): import("@tanstack/react-query").UseQueryResult<TData_6, Error>;
        useVaultStakeLocalMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultStakeLocalMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultStakeLocalMutation, unknown>;
        useVaultStakeRemoteMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultStakeRemoteMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultStakeRemoteMutation, unknown>;
        useVaultUnbondMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultUnbondMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultUnbondMutation, unknown>;
        useVaultBondMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultBondMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultBondMutation, unknown>;
        useVaultRollbackTxMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultRollbackTxMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultRollbackTxMutation, unknown>;
        useVaultCommitTxMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultCommitTxMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultCommitTxMutation, unknown>;
        useVaultReleaseLocalStakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultReleaseLocalStakeMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultReleaseLocalStakeMutation, unknown>;
        useVaultReleaseCrossStakeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultReleaseCrossStakeMutation, unknown>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultReleaseCrossStakeMutation, unknown>;
        VaultMessageComposer: typeof _32.VaultMessageComposer;
        VaultQueryClient: typeof _31.VaultQueryClient;
        VaultClient: typeof _31.VaultClient;
    };
}
