/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import * as _0 from "./Converter.types";
import * as _1 from "./Converter.client";
import * as _2 from "./Converter.message-composer";
import * as _3 from "./Converter.react-query";
import * as _4 from "./Converter.provider";
import * as _5 from "./SimplePriceFeed.types";
import * as _6 from "./SimplePriceFeed.client";
import * as _7 from "./SimplePriceFeed.message-composer";
import * as _8 from "./SimplePriceFeed.react-query";
import * as _9 from "./SimplePriceFeed.provider";
import * as _10 from "./VirtualStaking.types";
import * as _11 from "./VirtualStaking.client";
import * as _12 from "./VirtualStaking.message-composer";
import * as _13 from "./VirtualStaking.react-query";
import * as _14 from "./VirtualStaking.provider";
import * as _15 from "./ExternalStaking.types";
import * as _16 from "./ExternalStaking.client";
import * as _17 from "./ExternalStaking.message-composer";
import * as _18 from "./ExternalStaking.react-query";
import * as _19 from "./ExternalStaking.provider";
import * as _20 from "./NativeStaking.types";
import * as _21 from "./NativeStaking.client";
import * as _22 from "./NativeStaking.message-composer";
import * as _23 from "./NativeStaking.react-query";
import * as _24 from "./NativeStaking.provider";
import * as _25 from "./StakingProxy.types";
import * as _26 from "./StakingProxy.client";
import * as _27 from "./StakingProxy.message-composer";
import * as _28 from "./StakingProxy.react-query";
import * as _29 from "./StakingProxy.provider";
import * as _30 from "./Vault.types";
import * as _31 from "./Vault.client";
import * as _32 from "./Vault.message-composer";
import * as _33 from "./Vault.react-query";
import * as _34 from "./Vault.provider";
export declare namespace contracts {
    const Converter: {
        Converter: typeof _4.Converter;
        useConverterConfigQuery<TData = _0.ConfigResponse>({ client, options }: _3.ConverterConfigQuery<TData>): any;
        useConverterTestUnstakeMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.ConverterTestUnstakeMutation>, "mutationFn">): any;
        useConverterTestStakeMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.ConverterTestStakeMutation>, "mutationFn">): any;
        useConverterDistributeRewardsMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.ConverterDistributeRewardsMutation>, "mutationFn">): any;
        useConverterDistributeRewardMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.ConverterDistributeRewardMutation>, "mutationFn">): any;
        ConverterMessageComposer: typeof _2.ConverterMessageComposer;
        ConverterQueryClient: typeof _1.ConverterQueryClient;
        ConverterClient: typeof _1.ConverterClient;
    };
    const SimplePriceFeed: {
        SimplePriceFeed: typeof _9.SimplePriceFeed;
        useSimplePriceFeedConfigQuery<TData = _5.ConfigResponse>({ client, options }: _8.SimplePriceFeedConfigQuery<TData>): any;
        useSimplePriceFeedPriceQuery<TData_1 = _5.PriceResponse>({ client, options }: _8.SimplePriceFeedPriceQuery<TData_1>): any;
        useSimplePriceFeedUpdatePriceMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.SimplePriceFeedUpdatePriceMutation>, "mutationFn">): any;
        SimplePriceFeedMessageComposer: typeof _7.SimplePriceFeedMessageComposer;
        SimplePriceFeedQueryClient: typeof _6.SimplePriceFeedQueryClient;
        SimplePriceFeedClient: typeof _6.SimplePriceFeedClient;
    };
    const VirtualStaking: {
        VirtualStaking: typeof _14.VirtualStaking;
        useVirtualStakingConfigQuery<TData = _10.ConfigResponse>({ client, options }: _13.VirtualStakingConfigQuery<TData>): any;
        useVirtualStakingUnbondMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.VirtualStakingUnbondMutation>, "mutationFn">): any;
        useVirtualStakingBondMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.VirtualStakingBondMutation>, "mutationFn">): any;
        VirtualStakingMessageComposer: typeof _12.VirtualStakingMessageComposer;
        VirtualStakingQueryClient: typeof _11.VirtualStakingQueryClient;
        VirtualStakingClient: typeof _11.VirtualStakingClient;
    };
    const ExternalStaking: {
        ExternalStaking: typeof _19.ExternalStaking;
        useExternalStakingAllPendingRewardsQuery<TData = _15.AllPendingRewards>({ client, args, options }: _18.ExternalStakingAllPendingRewardsQuery<TData>): any;
        useExternalStakingPendingRewardsQuery<TData_1 = _15.MaybePendingRewards>({ client, args, options }: _18.ExternalStakingPendingRewardsQuery<TData_1>): any;
        useExternalStakingAllPendingTxsDescQuery<TData_2 = _15.AllTxsResponse>({ client, args, options }: _18.ExternalStakingAllPendingTxsDescQuery<TData_2>): any;
        useExternalStakingPendingTxQuery<TData_3 = _15.Tx>({ client, args, options }: _18.ExternalStakingPendingTxQuery<TData_3>): any;
        useExternalStakingStakesQuery<TData_4 = _15.StakesResponse>({ client, args, options }: _18.ExternalStakingStakesQuery<TData_4>): any;
        useExternalStakingStakeQuery<TData_5 = _15.Stake>({ client, args, options }: _18.ExternalStakingStakeQuery<TData_5>): any;
        useExternalStakingListRemoteValidatorsQuery<TData_6 = _15.ListRemoteValidatorsResponse>({ client, args, options }: _18.ExternalStakingListRemoteValidatorsQuery<TData_6>): any;
        useExternalStakingIbcChannelQuery<TData_7 = _15.IbcChannelResponse>({ client, options }: _18.ExternalStakingIbcChannelQuery<TData_7>): any;
        useExternalStakingAuthorizedEndpointQuery<TData_8 = _15.AuthorizedEndpoint>({ client, options }: _18.ExternalStakingAuthorizedEndpointQuery<TData_8>): any;
        useExternalStakingConfigQuery<TData_9 = _15.ConfigResponse>({ client, options }: _18.ExternalStakingConfigQuery<TData_9>): any;
        useExternalStakingMaxSlashQuery<TData_10 = _15.MaxSlashResponse>({ client, options }: _18.ExternalStakingMaxSlashQuery<TData_10>): any;
        useExternalStakingTestRollbackWithdrawRewardsMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestRollbackWithdrawRewardsMutation>, "mutationFn">): any;
        useExternalStakingTestCommitWithdrawRewardsMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestCommitWithdrawRewardsMutation>, "mutationFn">): any;
        useExternalStakingWithdrawRewardsMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingWithdrawRewardsMutation>, "mutationFn">): any;
        useExternalStakingTestDistributeRewardsMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestDistributeRewardsMutation>, "mutationFn">): any;
        useExternalStakingWithdrawUnbondedMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingWithdrawUnbondedMutation>, "mutationFn">): any;
        useExternalStakingTestRollbackUnstakeMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestRollbackUnstakeMutation>, "mutationFn">): any;
        useExternalStakingTestCommitUnstakeMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestCommitUnstakeMutation>, "mutationFn">): any;
        useExternalStakingUnstakeMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingUnstakeMutation>, "mutationFn">): any;
        useExternalStakingTestSetActiveValidatorMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestSetActiveValidatorMutation>, "mutationFn">): any;
        useExternalStakingTestRollbackStakeMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestRollbackStakeMutation>, "mutationFn">): any;
        useExternalStakingTestCommitStakeMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingTestCommitStakeMutation>, "mutationFn">): any;
        useExternalStakingReceiveVirtualStakeMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.ExternalStakingReceiveVirtualStakeMutation>, "mutationFn">): any;
        ExternalStakingMessageComposer: typeof _17.ExternalStakingMessageComposer;
        ExternalStakingQueryClient: typeof _16.ExternalStakingQueryClient;
        ExternalStakingClient: typeof _16.ExternalStakingClient;
    };
    const NativeStaking: {
        NativeStaking: typeof _24.NativeStaking;
        useNativeStakingOwnerByProxyQuery<TData = _20.OwnerByProxyResponse>({ client, args, options }: _23.NativeStakingOwnerByProxyQuery<TData>): any;
        useNativeStakingProxyByOwnerQuery<TData_1 = _20.ProxyByOwnerResponse>({ client, args, options }: _23.NativeStakingProxyByOwnerQuery<TData_1>): any;
        useNativeStakingConfigQuery<TData_2 = _20.Config>({ client, options }: _23.NativeStakingConfigQuery<TData_2>): any;
        useNativeStakingMaxSlashQuery<TData_3 = _20.MaxSlashResponse>({ client, options }: _23.NativeStakingMaxSlashQuery<TData_3>): any;
        useNativeStakingReleaseProxyStakeMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _23.NativeStakingReleaseProxyStakeMutation>, "mutationFn">): any;
        useNativeStakingReceiveStakeMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _23.NativeStakingReceiveStakeMutation>, "mutationFn">): any;
        NativeStakingMessageComposer: typeof _22.NativeStakingMessageComposer;
        NativeStakingQueryClient: typeof _21.NativeStakingQueryClient;
        NativeStakingClient: typeof _21.NativeStakingClient;
    };
    const StakingProxy: {
        StakingProxy: typeof _29.StakingProxy;
        useStakingProxyConfigQuery<TData = _25.Config>({ client, options }: _28.StakingProxyConfigQuery<TData>): any;
        useStakingProxyReleaseUnbondedMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyReleaseUnbondedMutation>, "mutationFn">): any;
        useStakingProxyUnstakeMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyUnstakeMutation>, "mutationFn">): any;
        useStakingProxyWithdrawRewardsMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyWithdrawRewardsMutation>, "mutationFn">): any;
        useStakingProxyVoteWeightedMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyVoteWeightedMutation>, "mutationFn">): any;
        useStakingProxyVoteMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyVoteMutation>, "mutationFn">): any;
        useStakingProxyRestakeMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyRestakeMutation>, "mutationFn">): any;
        useStakingProxyStakeMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.StakingProxyStakeMutation>, "mutationFn">): any;
        StakingProxyMessageComposer: typeof _27.StakingProxyMessageComposer;
        StakingProxyQueryClient: typeof _26.StakingProxyQueryClient;
        StakingProxyClient: typeof _26.StakingProxyClient;
    };
    const Vault: {
        Vault: typeof _34.Vault;
        useVaultAllPendingTxsDescQuery<TData = _30.AllTxsResponse>({ client, args, options }: _33.VaultAllPendingTxsDescQuery<TData>): any;
        useVaultPendingTxQuery<TData_1 = _30.Tx>({ client, args, options }: _33.VaultPendingTxQuery<TData_1>): any;
        useVaultAllAccountsQuery<TData_2 = _30.AllAccountsResponse>({ client, args, options }: _33.VaultAllAccountsQuery<TData_2>): any;
        useVaultAccountClaimsQuery<TData_3 = _30.AccountClaimsResponse>({ client, args, options }: _33.VaultAccountClaimsQuery<TData_3>): any;
        useVaultClaimQuery<TData_4 = _30.Lien>({ client, args, options }: _33.VaultClaimQuery<TData_4>): any;
        useVaultConfigQuery<TData_5 = _30.ConfigResponse>({ client, options }: _33.VaultConfigQuery<TData_5>): any;
        useVaultAccountQuery<TData_6 = _30.MaybeAccountResponse>({ client, args, options }: _33.VaultAccountQuery<TData_6>): any;
        useVaultStakeLocalMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultStakeLocalMutation>, "mutationFn">): any;
        useVaultStakeRemoteMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultStakeRemoteMutation>, "mutationFn">): any;
        useVaultUnbondMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultUnbondMutation>, "mutationFn">): any;
        useVaultBondMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultBondMutation>, "mutationFn">): any;
        useVaultRollbackTxMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultRollbackTxMutation>, "mutationFn">): any;
        useVaultCommitTxMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultCommitTxMutation>, "mutationFn">): any;
        useVaultReleaseLocalStakeMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultReleaseLocalStakeMutation>, "mutationFn">): any;
        useVaultReleaseCrossStakeMutation(options?: Omit<UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _33.VaultReleaseCrossStakeMutation>, "mutationFn">): any;
        VaultMessageComposer: typeof _32.VaultMessageComposer;
        VaultQueryClient: typeof _31.VaultQueryClient;
        VaultClient: typeof _31.VaultClient;
    };
}
